# py 3 - euler problem 2
"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
"""
import numpy as np

# params
# options = 'even', 'odd', or 'all'
return_condition = 'even'
# max_number in sequence.
max_number = 4* np.power(10,6)

#testing values
max_number = 89


def test_gen_fib():
    real_fib_first_10 = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
    gen_fib_first_10 = list(gen_fib(max_number=89))
    if real_fib_first_10 == gen_fib_first_10:
        return 0
    else:
        return 1


def gen_fib(max_number=max_number):
    current_array = [1,2]
    yield 1
    while current_array[1] <= max_number:
        yield current_array[1]
        current_array = [current_array[1], (current_array[0] + current_array[1])]




def sum_with_condition(fib_gen=gen_fib(max_number=max_number), condition=return_condition):
    return_module_dict = {
        'all': {
            'modulo': 0,
            'return': 0
        },
        'even': {
            'modulo': 2,
            'return': 0
        },
        'odd': {
            'modulo': 2,
            'return': 1
        }
    }

    modulo_against = return_module_dict[condition]['modulo']
    modulo_remainder = return_module_dict[condition]['return']

    filtered_fib = [x for x in fib_gen if (x % modulo_against == modulo_remainder)]
    return np.add.reduce(filtered_fib)
